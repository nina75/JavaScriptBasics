function solve(arr) {
    var numbers = arr[0].match(/(-?\s*\d+)/g);
    var maxCount = 1,
        count = 1;
    for (var i = 0, len = numbers.length - 1; i < len; i++) {
        var cur = Math.abs(+numbers[i]) ,
            next = Math.abs(+numbers[i + 1]);
        if((cur % 2 !== next % 2 || cur === 0 || next === 0)) {
            count++;
        } else {
            count = 1;
        }
        if(count > maxCount) {
            maxCount = count;
        }
    }
    console.log(maxCount);
}

solve([
    '(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)'
]);
